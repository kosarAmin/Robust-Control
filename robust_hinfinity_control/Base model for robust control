%% =========================================================================
%  final.m - Base model for robust H∞ control
% =========================================================================
%  This script serves as the fundamental implementation of H∞ control design.
%  It includes:
%   - Plant modeling
%   - Controller synthesis using `hinfsyn`
%   - Robust performance analysis using `mu()`
%  Sensitivity weighting functions are applied to improve robustness.
%
%  System Equations:
%                         10	    
%       Plant  =   ------------------ * pade
%                    (s - 1)(s + 1)
%
%                 2.4 s^2
%       Wt   =  ------------
%                ( s + 1 )^2
% =========================================================================

%% 1. Define system parameters
tau = 1.5 / 2;  % Delay parameter
w = logspace(-2, 2, 200);  % Frequency range

%% 2. Plant modeling
p0 = 10 ./ (-w.^2 - 1);
pm = p0 .* (-tau * 1j * w + 1) ./ (tau * 1j * w + 1);
p1 = exp(-2 * tau * 1j * w) .* p0;
W1 = abs(p1 ./ p0 - 1);
W2 = abs(p1 ./ pm - 1);

%% 3. Sensitivity weighting functions
n1 = 2.4 * tau * [1 0];
d1 = [tau 1];
[m1, ~] = bode(n1, d1, w);

tauf = 0.52;
n2 = 0.32 * [1 0 0 0];
d2 = conv([tauf^2 2 * tauf * 0.7 1], [tauf 1]);
[m2, ~] = bode(n2, d2, w);

% Uncomment to visualize frequency response
% semilogx(w, 20 * log10(W1), ':', w, 20 * log10(W2), '--', ...
%          w, 20 * log10(m1), 'm', w, 20 * log10(m2), 'k--'), grid
% axis([0.01 100 -40 20])

%%%% =========================================================================
%  Define plant models
%%%% =========================================================================
numerator_plant = 10 * [-tau 1];
denominator_plant = conv([1 0 -1], [tau 1]);

numerator_wt = n2;
denominator_wt = d2;

% Convert systems to Mu-synthesis format
plant = nd2sys(numerator_plant, denominator_plant);			
wt = nd2sys(numerator_wt, denominator_wt);
wu = nd2sys(1e-6, 1);

%%%% =========================================================================
%  Define interconnection structure
%%%% =========================================================================
systemnames = 'plant wt wu';
inputvar = '[yref; u]';
outputvar = '[wt; wu; yref-plant]';
input_to_plant = '[ u ]';
input_to_wt = '[plant]';
input_to_wu = '[u]';
sysoutname = 'plant_ic_st';
cleanupsysic = 'yes';
sysic

[A, B, C, D] = unpck(plant_ic_st);
[A, B, C, D] = minreal(A, B, C, D);
plant_ic_st = pck(A, B, C, D);

%%%% =========================================================================
%  H∞ Controller Synthesis
%%%% =========================================================================
[k1, g1, gf1] = hinfsyn(plant_ic_st, 1, 1, 0.1, 5, 1e-4, 2);

%%%% =========================================================================
%  Mixed Sensitivity Design
%%%% =========================================================================
numerator_ws = [1 0.5];
denominator_ws = 100 * [1 0.005];

ws = nd2sys(numerator_ws, denominator_ws);
wu = nd2sys(1e-6, 1);

systemnames = 'plant ws wt wu';
inputvar = '[yd; u]';
outputvar = '[wt; ws; wu ; yd-plant]';
input_to_plant = '[ u ]';
input_to_ws = '[ yd-plant ]';
input_to_wt = '[ plant ]';
input_to_wu = '[ u ]';
sysoutname = 'plant_ic';
cleanupsysic = 'yes';
sysic

% Nominal performance configuration
systemnames = 'plant ws wu';
inputvar = '[yd; u]';
outputvar = '[ ws; wu ; yd-plant]';
input_to_plant = '[ u ]';
input_to_ws = '[ yd-plant ]';
input_to_wu = '[ u ]';
sysoutname = 'plant_ic';
cleanupsysic = 'yes';
sysic

[A, B, C, D] = unpck(plant_ic);
[A, B, C, D] = minreal(A, B, C, D);
plant_ic = pck(A, B, C, D);

[k1, g1, gf1] = hinfsyn(plant_ic, 1, 1, 0.1, 10, 0.001, 2);

%%%% =========================================================================
%  Robust Performance Analysis using μ (Mu) Analysis
%%%% =========================================================================
systemnames = 'plant wt ws';
inputvar = '[pout; yd; u]';
outputvar = '[ u; ws; plant-yd ]';
input_to_plant = '[ u + wt ]';
input_to_wt = '[ pout ]';
input_to_ws = '[ yd - plant ]';
sysoutname = 'himat_ic';
cleanupsysic = 'yes';
sysic

[k1, clp1] = hinfsyn(himat_ic, 1, 1, 0.8, 50, 1e-1, 2);
omega = logspace(-3, 3, 60);
clp1g = frsp(clp1, omega);
clp1gs = vsvd(clp1g); % Singular value calculation

% Plot singular values
vplot('liv,m', clp1gs), grid
title('Singular Value Plot for the Closed-Loop System')
xlabel('Frequency (rad/sec)')

%%%% =========================================================================
%  D-K Iteration for Robust Controller Optimization
%%%% =========================================================================
deltaset = [1 1; 1 1];
clp_g1 = clp1g;
[bnds1, pv1] = mu(clp_g1, deltaset);

vplot('liv,m', vnorm(clp_g1), bnds1); grid
title('Maximum Singular Value and Mu Plot');
xlabel('Frequency (rad/sec)')

% Perform D-K iteration
DK_DEF_NAME = 'himat_def'; % Define DK iteration parameters
dkit

% Controller order reduction
[k_dk3bal, hsv] = sysbal(k_dk3);
[k_dk3red] = strunc(k_dk3bal, 13);
clpred_13 = starp(himat_ic, k_dk3red);
clpred_13g = frsp(clpred_13, OMEGA_DK);
[bnds] = mu(clpred_13g, [1 1; 1 1], 'c');

pkvnorm(sel(bnds, 1, 1))

